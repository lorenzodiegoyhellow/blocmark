import { useEffect, useState } from "react";
import { AppLayout } from "@/components/layout/app-layout";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogClose } from "@/components/ui/dialog";
import { Separator } from "@/components/ui/separator";
import { Textarea } from "@/components/ui/textarea";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { SimpleSecretLocationForm } from "@/components/map/simple-secret-location-form";
import { Plus, Search, MapPin, Camera, Map as MapIcon, List, User, X, Calendar, ArrowLeft, Send, MessageSquare, Image as ImageIcon } from "lucide-react";
import { MapContainer, TileLayer, Popup, useMap, Marker } from "react-leaflet";
import { MarkerWithCoordinateFallback } from "@/components/map/marker-with-coordinate-fallback";
import { LatLngExpression, Icon } from "leaflet";
import "leaflet/dist/leaflet.css";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useAuth } from "@/hooks/use-auth";
import { useLocation } from "wouter";
import { useToast } from "@/hooks/use-toast";
// Import the new components
import { LocationCarousel, LocationCard as CarouselLocationCard } from "@/components/secret-corners/location-carousel";
import { CommunityForum } from "@/components/secret-corners/community-forum";
import { TopContributors } from "@/components/secret-corners/top-contributors";
import { WeeklyChallenge } from "@/components/secret-corners/weekly-challenge";
import { SavedLists } from "@/components/secret-corners/saved-lists";

// Define marker icon (fixes the missing marker icon issue)
const customIcon = new Icon({
  iconUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png",
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  shadowUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png",
  shadowSize: [41, 41]
});

// Fix Leaflet icons at runtime
function FixLeafletIcons() {
  useEffect(() => {
    // Leaflet uses relative paths for its images which don't work well with our setup
    // This function fixes the icon URLs at runtime
    delete (Icon.Default.prototype as any)._getIconUrl;
    Icon.Default.mergeOptions({
      iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
      iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
      shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
    });
  }, []);
  return null;
}

// Redefine SecretLocation type to match how we'll store locations in localStorage
type SecretLocation = {
  id: number;
  name: string;
  description: string;
  location: string;  // This is the address field
  category: string;
  coords: [number, number];
  comments: number;
  images: string[];  // Now an array of image URLs or data URLs
  image: string;     // Main image (kept for backward compatibility)
  bestTimeOfDay?: string;
  recommendedEquipment?: string;
  compositionTip?: string;
  status: "pending" | "approved" | "rejected";
  createdAt: string;
  userId: number;
  userName?: string;
};

// Empty array for featured locations - these should come from the database
const FEATURED_LOCATIONS: SecretLocation[] = [];

// Categories for filtering
const CATEGORIES = [
  { id: "abandoned", name: "Abandoned" },
  { id: "urban", name: "Urban" },
  { id: "natural", name: "Natural" },
  { id: "beach", name: "Beach" },
  { id: "forest", name: "Forest" },
  { id: "desert", name: "Desert" },
  { id: "street-art", name: "Street Art" },
  { id: "sunset", name: "Sunset" },
  { id: "historic", name: "Historic" }
];

export default function SecretCornersFixed() {
  // Get authentication and location state
  const { user, isLoading: authLoading } = useAuth();
  const [, navigate] = useLocation();
  const { toast } = useToast();
  
  // Check if user is admin directly
  const isAdmin = user?.roles?.includes('admin') || false;
  
  // Console logging for debugging
  console.log('User auth data:', user);
  console.log('User is admin:', isAdmin);
  console.log('User roles:', user?.roles);
  
  // Skip access check for admin users
  const skipAccessCheck = isAdmin;
  
  // Show content directly for admin users without checking access
  const [adminHasAccess, setAdminHasAccess] = useState(false);
  // Track if approved user has access
  const [approvedUserHasAccess, setApprovedUserHasAccess] = useState(false);
  // Track if access check has completed
  const [accessCheckComplete, setAccessCheckComplete] = useState(false);
  
  // Add proper auth redirect for non-logged in users
  useEffect(() => {
    if (!user) {
      console.log('No user detected, redirecting to login page');
      navigate('/auth?redirect=/secret-corners');
    } else {
      console.log('User detected, will check access status in next step');
    }
  }, [user, navigate]);
  
  // Set admin access immediately when we detect admin role
  useEffect(() => {
    if (isAdmin && user) {
      console.log('ADMIN USER DETECTED - Bypassing access check');
      setAdminHasAccess(true);
      setAccessCheckComplete(true);
    }
  }, [isAdmin, user]);
  
  // Check user's access to Secret Corners (only for non-admin users)
  const {
    data: accessData,
    isLoading: isCheckingAccess
  } = useQuery({
    queryKey: ['/api/secret-corners/access'],
    queryFn: async () => {
      try {
        // For admins, we can just return a successful access object without calling the API
        if (isAdmin) {
          console.log('Admin user - returning success without API call');
          return { 
            hasAccess: true, 
            status: 'admin', 
            message: 'Admin access granted' 
          };
        }
        
        // For non-admin users, check with the server
        const response = await fetch('/api/secret-corners/access');
        if (!response.ok) {
          throw new Error('Failed to check Secret Corners access');
        }
        const data = await response.json();
        
        // Debug server response with detailed information
        console.log('SECRET CORNERS ACCESS RESPONSE:', {
          data,
          hasAccess: data.hasAccess,
          status: data.status,
          responseStatus: response.status,
          responseOk: response.ok
        });
        
        // If the user has access, set the state variable
        if (data.hasAccess) {
          console.log('Setting approved user access to TRUE');
          setApprovedUserHasAccess(true);
        }
        
        // Mark access check as complete
        setAccessCheckComplete(true);
        
        // Only redirect if user doesn't have access and isn't an admin
        if (!isAdmin && !data.hasAccess) {
          console.log('No access detected, redirecting to application page');
          navigate('/secret-corners-apply');
        } else {
          console.log('User has access to Secret Corners:', data);
        }
        
        return data;
      } catch (error) {
        console.error('Error checking Secret Corners access:', error);
        // Redirect on error as well for non-admin users
        if (!isAdmin) {
          console.log('Error in access check, redirecting to application page');
          navigate('/secret-corners-apply');
        }
        
        // Mark access check as complete even on error
        setAccessCheckComplete(true);
        
        return { hasAccess: false, status: 'not_applied' };
      }
    },
    enabled: !!user && !skipAccessCheck, // Only run this query for non-admin logged-in users
    staleTime: 0, // Always fetch fresh data
    gcTime: 0 // Don't cache this response (formerly called cacheTime)
  });

  // If the user doesn't have approved access, redirect to the appropriate page
  useEffect(() => {
    // If no user is available yet, don't do anything
    if (!user) return;
    
    // Admin bypass - if user is admin, we don't need to do any redirects
    if (isAdmin) {
      console.log('Admin access granted directly to Secret Corners');
      return; // Admin can access, so don't redirect
    }
    
    // For non-admin users, check if we're still loading access data
    if (isCheckingAccess) {
      console.log('Still checking access status...');
      return;
    }
    
    // Now handle the access check for regular users
    if (accessData) {
      console.log('ACCESS CHECK DATA:', accessData);
      
      // For non-admin users, check access status
      if (!accessData.hasAccess) {
        if (accessData.status === 'pending') {
          // If their application is pending, show a toast and redirect
          toast({
            title: "Application In Review",
            description: "Your Secret Corners application is still being reviewed. We'll notify you when it's approved.",
          });
          navigate('/secret-corners-apply');
        } else if (accessData.status === 'rejected') {
          // If their application was rejected, show a toast and redirect
          toast({
            title: "Access Denied",
            description: "Your Secret Corners application was not approved. You can apply again with more details.",
            variant: "destructive"
          });
          navigate('/secret-corners-apply');
        } else {
          // If they haven't applied yet, redirect to the application page
          navigate('/secret-corners-apply');
        }
      }
    } else if (!isCheckingAccess && !isAdmin) {
      // Default redirect for non-admin users if access data is not available
      console.log('No access data available - redirecting non-admin user to application page');
      navigate('/secret-corners-apply');
    }
  }, [accessData, isCheckingAccess, navigate, toast, isAdmin, user]);

  // Show a loading state while checking auth or access status
  // Skip loading if user is admin or has approved access
  if ((authLoading || (isCheckingAccess && !skipAccessCheck)) && !adminHasAccess && !approvedUserHasAccess && !accessCheckComplete) {
    return (
      <AppLayout>
        <div className="container mx-auto py-12 flex justify-center items-center min-h-[60vh]">
          <div className="text-center">
            <div className="relative mx-auto w-16 h-16 mb-4">
              <div className="absolute inset-0 border-t-2 border-primary rounded-full animate-spin"></div>
            </div>
            <h2 className="text-xl font-medium mb-2">Checking access...</h2>
            <p className="text-muted-foreground">Please wait while we verify your access to Secret Corners.</p>
          </div>
        </div>
      </AppLayout>
    );
  }
  
  // If access check is complete and user has no access (not admin, not approved)
  if (accessCheckComplete && !adminHasAccess && !approvedUserHasAccess && !isAdmin) {
    console.log("Access check complete, but user has no access - redirecting");
    navigate('/secret-corners-apply');
    return null;
  }
  
  // Access data is loaded and user has been redirected if needed, proceed with rendering
  // The useEffect above will handle redirects for users without access

  // State (only initialize these once we know the user has access)
  const [view, setView] = useState<"map" | "list">("map");
  const [searchQuery, setSearchQuery] = useState("");
  const [activeCategory, setActiveCategory] = useState<string | null>(null);
  const [showAddLocationModal, setShowAddLocationModal] = useState(false);
  const [userLocations, setUserLocations] = useState<SecretLocation[]>([]);
  const [isLoadingLocations, setIsLoadingLocations] = useState(true);
  const [activeTab, setActiveTab] = useState("featured"); // "featured", "submitted", "all"
  const [selectedLocation, setSelectedLocation] = useState<SecretLocation | null>(null);
  const [showLocationDetailsModal, setShowLocationDetailsModal] = useState(false);
  const [commentText, setCommentText] = useState("");
  
  // Comments state (placeholder until API implementation)
  const [locationComments, setLocationComments] = useState<{
    [locationId: number]: Array<{
      id: number;
      userId: number;
      username: string;
      text: string;
      createdAt: string;
    }>
  }>({});

  // Use React Query to load approved secret locations
  const queryClient = useQueryClient();
  
  // Query for fetching comments for a location
  const fetchComments = (locationId: number) => {
    return useQuery({
      queryKey: [`/api/secret-locations/${locationId}/comments`],
      queryFn: async () => {
        try {
          const response = await fetch(`/api/secret-locations/${locationId}/comments`);
          if (!response.ok) {
            throw new Error('Failed to fetch comments');
          }
          return await response.json();
        } catch (error) {
          console.error('Error fetching comments:', error);
          throw error;
        }
      },
      enabled: false, // Don't run the query automatically
    });
  };
  
  // Effect to fetch comments when a location is selected
  useEffect(() => {
    if (selectedLocation && selectedLocation.id) {
      // This would be a real API call in a complete implementation
      // For now we'll just simulate with local state
      console.log("Would fetch comments for location:", selectedLocation.id);
      
      // In a real implementation:
      // const { refetch } = fetchComments(selectedLocation.id);
      // refetch();
    }
  }, [selectedLocation]);
  
  // Mutation for posting comments
  const commentMutation = useMutation({
    mutationFn: async ({ locationId, text }: { locationId: number, text: string }) => {
      try {
        const response = await fetch(`/api/secret-locations/${locationId}/comments`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ text }),
        });
        
        if (!response.ok) {
          throw new Error('Failed to post comment');
        }
        
        return await response.json();
      } catch (error) {
        console.error('Error posting comment:', error);
        throw error;
      }
    },
    onSuccess: () => {
      // Invalidate queries that might be affected by this mutation
      queryClient.invalidateQueries({ queryKey: ['/api/secret-locations'] });
      
      // Clear comment text
      setCommentText("");
      
      // Show success toast
      toast({
        title: "Comment added",
        description: "Your comment has been posted successfully.",
        variant: "default"
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: `Failed to post comment: ${error.message}`,
        variant: "destructive"
      });
    }
  });
  
  // Query for user's own submitted pending locations
  const {
    data: submittedLocations = [],
    isLoading: isLoadingSubmitted,
    refetch: refetchSubmitted
  } = useQuery({
    queryKey: ['/api/secret-locations/user/mine'],
    queryFn: async () => {
      try {
        const response = await fetch('/api/secret-locations/user/mine');
        if (!response.ok) {
          throw new Error('Failed to fetch your submitted locations');
        }
        return await response.json();
      } catch (error) {
        console.error('Error fetching submitted locations:', error);
        toast({
          title: 'Error',
          description: 'Failed to load your submitted locations',
          variant: 'destructive'
        });
        return [];
      }
    },
    refetchOnWindowFocus: true
  });

  // Query for all approved secret locations
  const {
    data: approvedLocations = [],
    isLoading: isLoadingApproved,
    refetch: refetchApproved
  } = useQuery({
    queryKey: ['/api/secret-locations'],
    queryFn: async () => {
      try {
        const response = await fetch('/api/secret-locations');
        if (!response.ok) {
          throw new Error('Failed to fetch approved locations');
        }
        
        const data = await response.json();
        console.log('Successfully loaded approved locations:', data);
        return data;
      } catch (error) {
        console.error('Error fetching approved locations:', error);
        toast({
          title: 'Error',
          description: 'Failed to load approved locations',
          variant: 'destructive'
        });
        return [];
      }
    },
    refetchOnWindowFocus: true
  });

  // Update state when data is loaded
  useEffect(() => {
    setIsLoadingLocations(isLoadingSubmitted || isLoadingApproved);
    
    // Map API locations to our SecretLocation type and update state
    if (submittedLocations && Array.isArray(submittedLocations)) {
      const mappedSubmitted = submittedLocations.map(loc => ({
        ...loc,
        image: loc.images && loc.images.length > 0 ? loc.images[0] : '',
        coords: loc.coords || [0, 0],
        comments: loc.comments || 0
      }));
      
      setUserLocations(mappedSubmitted);
    }
  }, [submittedLocations, isLoadingSubmitted, isLoadingApproved]);

  // Filter locations based on search query, active category, and tab
  const filteredLocations = (() => {
    let locations: SecretLocation[] = [];

    console.log("Active Tab:", activeTab);
    console.log("User Locations:", userLocations);
    console.log("Approved API Locations:", approvedLocations);
    
    // Log detailed coordinates information
    if (approvedLocations && approvedLocations.length > 0) {
      console.log("COORDINATES DEBUG INFO:");
      approvedLocations.forEach((loc: any) => {
        console.log(`Location: ${loc.name}`);
        console.log(`Raw latitude: ${loc.latitude}, type: ${typeof loc.latitude}`);
        console.log(`Raw longitude: ${loc.longitude}, type: ${typeof loc.longitude}`);
        
        // Try parsing coordinates
        const lat = parseFloat(loc.latitude || "0");
        const lng = parseFloat(loc.longitude || "0");
        console.log(`Parsed lat: ${lat}, lng: ${lng}`);
        
        // Check if they need to be swapped
        const isLatValid = Math.abs(lat) <= 90;
        const isLngValid = Math.abs(lng) <= 180;
        console.log(`Is lat valid: ${isLatValid}, Is lng valid: ${isLngValid}`);
        
        if (!isLatValid || !isLngValid) {
          console.log("COORDINATE VALIDATION ISSUE DETECTED - Will attempt to swap or fix");
        }
      });
    }
    
    if (activeTab === "featured") {
      // Featured tab will now show approved locations since we don't have hardcoded ones anymore
      const dbApproved = approvedLocations.map((loc: any) => {
        console.log("Processing location:", loc.name, "Coords:", loc.latitude, loc.longitude);
        
        // Convert latitude and longitude to numbers
        const lat = parseFloat(loc.latitude || "0");
        const lng = parseFloat(loc.longitude || "0");
        
        // Apply correction if needed - Leaflet expects [latitude, longitude]
        // Sometimes coordinates might be swapped if the source was using [longitude, latitude] format
        // Check if values are in valid ranges for earth coordinates
        const coordinates: [number, number] = [
          // Valid latitude range is -90 to 90 degrees
          Math.abs(lat) <= 90 ? lat : lng,
          // Valid longitude range is -180 to 180 degrees
          Math.abs(lng) <= 180 ? lng : lat
        ];
        
        console.log("Processed coordinates:", coordinates);
        
        return {
          ...loc,
          image: loc.mainImage || (loc.images && loc.images.length > 0 ? loc.images[0] : ''),
          coords: coordinates,
          comments: loc.comments || 0
        };
      });
      console.log("Featured tab locations:", dbApproved);
      locations = [...dbApproved];
    } else if (activeTab === "submitted") {
      locations = userLocations.filter(loc => loc.status === "pending");
      console.log("Submitted tab locations:", locations);
    } else if (activeTab === "all") {
      // Use approved locations from the API only
      const dbApproved = approvedLocations.map((loc: any) => {
        console.log("Processing location:", loc.name, "Coords:", loc.latitude, loc.longitude);
        
        // Convert latitude and longitude to numbers
        const lat = parseFloat(loc.latitude || "0");
        const lng = parseFloat(loc.longitude || "0");
        
        // Apply correction if needed - Leaflet expects [latitude, longitude]
        // Sometimes coordinates might be swapped if the source was using [longitude, latitude] format
        // Check if values are in valid ranges for earth coordinates
        const coordinates: [number, number] = [
          // Valid latitude range is -90 to 90 degrees
          Math.abs(lat) <= 90 ? lat : lng,
          // Valid longitude range is -180 to 180 degrees
          Math.abs(lng) <= 180 ? lng : lat
        ];
        
        console.log("Processed coordinates:", coordinates);
        
        return {
          ...loc,
          image: loc.mainImage || (loc.images && loc.images.length > 0 ? loc.images[0] : ''),
          coords: coordinates,
          comments: loc.comments || 0
        };
      });
      console.log("All tab locations:", dbApproved);
      locations = [...dbApproved];
    }

    return locations.filter(location => {
      const matchesSearch = !searchQuery || 
        location.name.toLowerCase().includes(searchQuery.toLowerCase()) || 
        location.description.toLowerCase().includes(searchQuery.toLowerCase()) || 
        location.location.toLowerCase().includes(searchQuery.toLowerCase());
      
      const matchesCategory = !activeCategory || 
        location.category.toLowerCase() === activeCategory.toLowerCase();
      
      return matchesSearch && matchesCategory;
    });
  })();

  // Handler for category selection
  const handleCategoryClick = (categoryId: string) => {
    if (activeCategory === categoryId) {
      setActiveCategory(null); // Toggle off if already selected
    } else {
      setActiveCategory(categoryId);
    }
  };

  // Handler after successful location submission
  const handleSuccessfulSubmission = () => {
    // Automatically switch to the "Submitted" tab
    setActiveTab("submitted");
  };

  // Location card component - used in list view
  const LocationCard = ({ location }: { location: SecretLocation }) => {
    // Function to handle view details click
    const handleViewDetails = (e: React.MouseEvent) => {
      e.preventDefault();
      e.stopPropagation();
      console.log("Location details requested:", location);
      // Instead of redirecting, we'll show details in a modal/popup
      setSelectedLocation(location);
      setShowLocationDetailsModal(true);
    };
    
    return (
      <Card className="overflow-hidden group hover:shadow-lg transition-all duration-300 border border-transparent hover:border-border">
        <div className="relative h-52">
          <img 
            src={location.image} 
            alt={location.name} 
            className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-[1.03]"
          />
          <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-70"></div>
          <Badge className="absolute top-3 right-3 shadow-md">
            {location.category}
          </Badge>
          <div className="absolute bottom-3 left-3 right-3 text-white">
            <h3 className="font-semibold text-xl tracking-tight">{location.name}</h3>
            <p className="text-sm flex items-center mt-1 text-white/80">
              <MapPin className="h-3 w-3 mr-1" />
              {location.location}
            </p>
          </div>
        </div>
        <CardContent className="p-4 pt-3">
          {location.userName && (
            <div className="flex items-center justify-between mb-2">
              <p className="text-xs text-muted-foreground flex items-center">
                <User className="h-3 w-3 mr-1" />
                Submitted by{" "}
                <a 
                  href={`/users/${location.userId}`} 
                  className="ml-1 text-primary hover:underline font-medium"
                  onClick={(e) => {
                    e.stopPropagation(); // Prevent triggering the card's onClick
                  }}
                >
                  {location.userName}
                </a>
              </p>
              <span className="text-xs text-muted-foreground flex items-center">
                <MessageSquare className="h-3 w-3 mr-1" />
                {location.comments}
              </span>
            </div>
          )}
          <p className="text-sm line-clamp-3 mb-3">{location.description}</p>
          <div className="flex justify-end">
            <Button 
              size="sm" 
              variant="default" 
              onClick={handleViewDetails}
              className="shadow-sm transition-all duration-300 hover:shadow group"
            >
              <span>View Details</span>
              <span className="ml-1 transition-transform duration-300 group-hover:translate-x-0.5">→</span>
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  };

  // Location popup component for map markers
  const LocationPopup = ({ location }: { location: SecretLocation }) => {
    // Function to handle view details click
    const handleViewDetails = (e: React.MouseEvent) => {
      e.stopPropagation();
      e.preventDefault(); // Prevent default for the Leaflet popup
      
      console.log("Map popup location details requested:", location);
      // Show details in a modal/popup instead of navigating
      setSelectedLocation(location);
      setShowLocationDetailsModal(true);
    };
    
    return (
      <div className="w-[280px]">
        <div className="relative w-full h-36 overflow-hidden rounded-t-md">
          <img 
            src={location.image} 
            alt={location.name} 
            className="w-full h-full object-cover"
          />
          <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-70"></div>
          <Badge className="absolute top-2 right-2 shadow-sm">
            {location.category}
          </Badge>
          <div className="absolute bottom-2 left-2 right-2 text-white">
            <h3 className="font-semibold text-lg">{location.name}</h3>
          </div>
        </div>
        <div className="p-4">
          <p className="text-xs text-muted-foreground flex items-center mb-2">
            <MapPin className="h-3 w-3 mr-1" />
            {location.location}
          </p>
          {location.userName && (
            <p className="text-xs text-muted-foreground flex items-center mb-2">
              <User className="h-3 w-3 mr-1" />
              Submitted by{" "}
              <a 
                href={`/users/${location.userId}`} 
                className="ml-1 text-primary hover:underline font-medium"
                onClick={(e) => {
                  e.stopPropagation();
                  e.preventDefault(); // Prevent default for the Leaflet popup
                  window.location.href = `/users/${location.userId}`;
                }}
              >
                {location.userName}
              </a>
            </p>
          )}
          <p className="text-xs line-clamp-3 mb-4">{location.description}</p>
          <div className="flex justify-between items-center">
            <span className="text-xs text-muted-foreground flex items-center">
              <MessageSquare className="h-3 w-3 mr-1" />
              {location.comments} comments
            </span>
            <Button 
              size="sm" 
              variant="default" 
              className="h-7 text-xs shadow-sm transition-all hover:shadow"
              onClick={handleViewDetails}
            >
              <span>View Details</span>
              <span className="ml-1">→</span>
            </Button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <AppLayout>
      <div className="container mx-auto py-8">
        <div className="flex flex-col space-y-6">
          {/* Enhanced Header section */}
          <div className="p-6 rounded-xl bg-card bg-opacity-50 border shadow-sm mb-2">
            <div className="flex flex-col md:flex-row md:items-center justify-between gap-6">
              <div>
                <div className="flex items-center gap-2 mb-2">
                  <span className="relative inline-block">
                    <MapIcon className="h-6 w-6 text-primary" />
                    <span className="absolute -bottom-1 -right-1 h-3 w-3 bg-primary rounded-full border-2 border-background"></span>
                  </span>
                  <h1 className="text-3xl font-bold tracking-tight">Secret Corners</h1>
                </div>
                <p className="text-muted-foreground max-w-xl">
                  Discover hidden gems for photography, videography, and exploration. 
                  Exclusive locations shared by our community of photographers and adventurers.
                </p>
              </div>
              
              <div className="flex flex-col sm:flex-row items-center gap-3">
                <div className="flex border rounded-md bg-background shadow-sm w-full sm:w-auto">
                  <Button
                    variant={view === "map" ? "default" : "ghost"}
                    size="sm"
                    className="rounded-r-none flex-1"
                    onClick={() => setView("map")}
                  >
                    <MapIcon className="h-4 w-4 mr-2" />
                    Map
                  </Button>
                  <Button
                    variant={view === "list" ? "default" : "ghost"}
                    size="sm"
                    className="rounded-l-none flex-1"
                    onClick={() => setView("list")}
                  >
                    <List className="h-4 w-4 mr-2" />
                    List
                  </Button>
                </div>
                
                <Button
                  variant="default"
                  size="sm"
                  className="shadow-sm w-full sm:w-auto"
                  onClick={() => setShowAddLocationModal(true)}
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Location
                </Button>
              </div>
            </div>
          </div>
          
          {/* Enhanced Search and filter bar */}
          <div className="p-4 rounded-lg bg-card border shadow-sm">
            <div className="grid grid-cols-1 md:grid-cols-[1fr_auto] gap-4">
              <div className="relative">
                <div className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground flex items-center">
                  <Search className="h-4 w-4" />
                </div>
                <Input
                  type="text"
                  placeholder="Search locations, cities, or categories..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10 h-10 transition-shadow duration-200 shadow-sm hover:shadow focus:shadow-md"
                />
              </div>
              
              <div className="flex items-center">
                <span className="text-sm text-muted-foreground font-medium mr-2 hidden md:block">Categories:</span>
                <div className="flex flex-wrap gap-2 overflow-x-auto pb-1">
                  {CATEGORIES.map(category => (
                    <Badge
                      key={category.id}
                      variant={activeCategory === category.id ? "default" : "outline"}
                      className={`cursor-pointer transition-all duration-200 ${
                        activeCategory === category.id ? 'shadow-sm' : 'hover:shadow-sm'
                      }`}
                      onClick={() => handleCategoryClick(category.id)}
                    >
                      {category.name}
                    </Badge>
                  ))}
                </div>
              </div>
            </div>
          </div>
          
          {/* Enhanced tabs for different views */}
          <Tabs defaultValue="all" value={activeTab} onValueChange={setActiveTab} className="my-6">
            <div className="border-b mb-2">
              <TabsList className="w-full md:w-auto bg-transparent justify-start h-auto p-0 space-x-6">
                <TabsTrigger 
                  value="featured" 
                  className="px-1 py-3 font-medium data-[state=active]:border-b-2 data-[state=active]:border-primary data-[state=active]:shadow-none bg-transparent"
                >
                  Featured
                </TabsTrigger>
                <TabsTrigger 
                  value="submitted" 
                  className="px-1 py-3 font-medium data-[state=active]:border-b-2 data-[state=active]:border-primary data-[state=active]:shadow-none bg-transparent"
                >
                  Submitted
                </TabsTrigger>
                <TabsTrigger 
                  value="all" 
                  className="px-1 py-3 font-medium data-[state=active]:border-b-2 data-[state=active]:border-primary data-[state=active]:shadow-none bg-transparent"
                >
                  All Locations
                </TabsTrigger>
              </TabsList>
            </div>
            
            <TabsContent value="featured" className="mt-6">
              {view === "map" ? (
                <div className="h-[600px] rounded-lg overflow-hidden border">
                  <MapContainer 
                    center={[39.8283, -98.5795]} 
                    zoom={4} 
                    style={{ height: '100%', width: '100%' }}
                  >
                    <FixLeafletIcons />
                    <TileLayer
                      url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                      attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                    />
                    {filteredLocations.map(location => (
                      <MarkerWithCoordinateFallback 
                        key={location.id} 
                        location={location}
                        
                      >
                        <Popup>
                          <LocationPopup location={location} />
                        </Popup>
                      </MarkerWithCoordinateFallback>
                    ))}
                  </MapContainer>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {filteredLocations.length > 0 ? (
                    filteredLocations.map(location => (
                      <LocationCard key={location.id} location={location} />
                    ))
                  ) : (
                    <div className="col-span-full text-center py-12">
                      <Camera className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                      <h3 className="text-lg font-medium mb-1">No locations found</h3>
                      <p className="text-muted-foreground">
                        Try adjusting your search or filters
                      </p>
                    </div>
                  )}
                </div>
              )}
            </TabsContent>
            
            <TabsContent value="submitted" className="mt-6">
              {isLoadingLocations ? (
                <div className="text-center py-12">
                  <p>Loading your submitted locations...</p>
                </div>
              ) : (
                <>
                  {filteredLocations.length > 0 ? (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {filteredLocations.map(location => (
                        <LocationCard key={location.id} location={location} />
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-12 border rounded-lg">
                      <Camera className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                      <h3 className="text-lg font-medium mb-1">No submitted locations yet</h3>
                      <p className="text-muted-foreground mb-4">
                        Share your secret photography spots with the community
                      </p>
                      <Button onClick={() => setShowAddLocationModal(true)}>
                        <Plus className="h-4 w-4 mr-2" />
                        Add Location
                      </Button>
                    </div>
                  )}
                </>
              )}
            </TabsContent>
            
            <TabsContent value="all" className="mt-6">
              {view === "map" ? (
                <div className="h-[600px] rounded-lg overflow-hidden border">
                  <MapContainer 
                    center={[39.8283, -98.5795]} 
                    zoom={4} 
                    style={{ height: '100%', width: '100%' }}
                  >
                    <FixLeafletIcons />
                    <TileLayer
                      url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                      attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                    />
                    {filteredLocations.map(location => (
                      <MarkerWithCoordinateFallback 
                        key={location.id} 
                        location={location}
                        
                      >
                        <Popup>
                          <LocationPopup location={location} />
                        </Popup>
                      </MarkerWithCoordinateFallback>
                    ))}
                  </MapContainer>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {filteredLocations.length > 0 ? (
                    filteredLocations.map(location => (
                      <LocationCard key={location.id} location={location} />
                    ))
                  ) : (
                    <div className="col-span-full text-center py-12">
                      <Camera className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                      <h3 className="text-lg font-medium mb-1">No locations found</h3>
                      <p className="text-muted-foreground">
                        Try adjusting your search or filters
                      </p>
                    </div>
                  )}
                </div>
              )}
            </TabsContent>
          </Tabs>
          
          {/* Add the new components below the main tab section */}
          <div className="mt-8">
            {/* Horizontal Carousels */}
            <LocationCarousel
              title="Urban Gems"
              description="Discover hidden photography spots in urban environments"
              locations={approvedLocations
                .filter(loc => loc.category === "urban" || loc.category === "street-art")
                .slice(0, 10)
                .map(loc => ({
                  id: loc.id,
                  name: loc.name,
                  image: loc.image,
                  location: loc.location,
                  tags: [loc.category, "Urban", "City"],
                  contributor: {
                    id: loc.userId,
                    name: loc.userName || "Anonymous",
                    image: ""
                  },
                  bookmarked: false
                }))}
              viewAllLink="/secret-corners/categories/urban"
            />
            
            <LocationCarousel
              title="Natural Wonders"
              description="Beautiful natural landscapes for outdoor photography"
              locations={approvedLocations
                .filter(loc => 
                  loc.category === "natural" || 
                  loc.category === "beach" || 
                  loc.category === "forest"
                )
                .slice(0, 10)
                .map(loc => ({
                  id: loc.id,
                  name: loc.name,
                  image: loc.image,
                  location: loc.location,
                  tags: [loc.category, "Nature", "Outdoor"],
                  contributor: {
                    id: loc.userId,
                    name: loc.userName || "Anonymous",
                    image: ""
                  },
                  bookmarked: false
                }))}
              viewAllLink="/secret-corners/categories/natural"
            />
            
            <LocationCarousel
              title="Unique Spots"
              description="One-of-a-kind locations with interesting stories"
              locations={approvedLocations
                .filter(loc => 
                  loc.category === "abandoned" || 
                  loc.category === "historic"
                )
                .slice(0, 10)
                .map(loc => ({
                  id: loc.id,
                  name: loc.name,
                  image: loc.image,
                  location: loc.location,
                  tags: [loc.category, "Unique", "Special"],
                  contributor: {
                    id: loc.userId,
                    name: loc.userName || "Anonymous",
                    image: ""
                  },
                  bookmarked: false,
                  label: "Editor's Pick"
                }))}
              viewAllLink="/secret-corners/categories/unique"
            />
            
            {/* Weekly Challenge section */}
            <WeeklyChallenge
              id={1}
              title="Spring Landscapes"
              description="Capture the beauty of spring in your area. Show us seasonal colors, landscapes, and hidden gems that showcase the renewal of nature."
              startDate={new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()}
              endDate={new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()}
              image="/attached_assets/6I4B6500.jpg"
              previousWinner={approvedLocations.length > 0 ? {
                id: approvedLocations[0].id,
                locationName: approvedLocations[0].name,
                userName: approvedLocations[0].userName || "Photographer",
                image: approvedLocations[0].image
              } : undefined}
              onSubmitClick={() => setShowAddLocationModal(true)}
            />
            
            {/* Two columns for Community Forum and Top Contributors */}
            <div className="grid grid-cols-1 lg:grid-cols-[2fr_1fr] gap-8 mt-8">
              {/* Community Forum */}
              <CommunityForum
                categories={[
                  { id: "tips", name: "Tips & Tricks", slug: "tips-tricks", description: "Share your photography and exploration tips" },
                  { id: "locations", name: "Location Requests", slug: "location-requests", description: "Looking for a specific type of location?" },
                  { id: "behind", name: "Behind the Scenes", slug: "behind-scenes", description: "Share experiences from your photoshoots" },
                  { id: "gear", name: "Gear Talk", slug: "gear-talk", description: "Discuss photography equipment" },
                  { id: "travel", name: "Travel & Access", slug: "travel-access", description: "Transportation and accessibility info" }
                ]}
                posts={[]}
                currentUser={user ? {
                  id: user.id,
                  name: user.name || user.username,
                  image: user.profileImage
                } : undefined}
              />
              
              {/* Top Contributors */}
              <TopContributors
                contributors={[
                  {
                    id: 1,
                    name: "Alex Morgan",
                    image: "/attached_assets/2.png",
                    approvedLocations: 24,
                    likesReceived: 156,
                    badges: ["Top Explorer", "Local Guide"],
                    rank: 1
                  },
                  {
                    id: 2,
                    name: "Jamie Chen",
                    image: "/attached_assets/1.jpg",
                    approvedLocations: 18,
                    likesReceived: 142,
                    badges: ["Photo Master"],
                    rank: 2
                  },
                  {
                    id: 3,
                    name: "Sam Wilson",
                    approvedLocations: 15,
                    likesReceived: 98,
                    badges: ["Urban Explorer"],
                    rank: 3
                  },
                  {
                    id: 4,
                    name: "Taylor Kim",
                    approvedLocations: 12,
                    likesReceived: 87,
                    badges: ["Nature Scout"],
                    rank: 4
                  },
                  {
                    id: 5,
                    name: "Jordan Smith",
                    approvedLocations: 10,
                    likesReceived: 75,
                    badges: ["Rising Star"],
                    rank: 5
                  }
                ]}
                period="monthly"
                onUserClick={(userId) => console.log(`View contributor profile: ${userId}`)}
              />
            </div>
            
            {/* Saved Lists */}
            <SavedLists
              lists={[]}
              locations={{}}
              onCreateList={(data) => {
                console.log("Creating new list:", data);
                toast({
                  title: "List Created",
                  description: `Your list "${data.name}" has been created.`
                });
              }}
              onDeleteList={(listId) => {
                console.log("Deleting list:", listId);
              }}
              onEditList={(listId, data) => {
                console.log("Editing list:", listId, data);
              }}
              onRemoveLocation={(listId, locationId) => {
                console.log("Removing location from list:", listId, locationId);
              }}
              onShareList={(listId) => {
                console.log("Sharing list:", listId);
              }}
            />
          </div>
        </div>
      </div>
      
      {/* Add location modal */}
      <SimpleSecretLocationForm
        isOpen={showAddLocationModal}
        onClose={() => setShowAddLocationModal(false)}
        onSuccess={handleSuccessfulSubmission}
      />
      
      {/* Enhanced Location details modal */}
      <Dialog open={showLocationDetailsModal} onOpenChange={setShowLocationDetailsModal}>
        <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto bg-white p-0 rounded-xl">
          {selectedLocation && (
            <div>
              {/* Hero image with overlaid title */}
              <div className="relative h-56 overflow-hidden">
                <img
                  src={selectedLocation.image}
                  alt={selectedLocation.name}
                  className="w-full h-full object-cover"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent"></div>
                <div className="absolute bottom-0 left-0 right-0 p-6 text-white">
                  <h2 className="text-3xl font-bold tracking-tight mb-1">{selectedLocation.name}</h2>
                  <div className="flex items-center text-sm">
                    <MapPin className="h-4 w-4 mr-1" />
                    <span className="opacity-90">{selectedLocation.location}</span>
                  </div>
                </div>
                <div className="absolute top-4 right-4 flex gap-2">
                  <Badge className="shadow-md">{selectedLocation.category}</Badge>
                  <Badge variant="outline" className="bg-white/80 shadow-md">{selectedLocation.status}</Badge>
                </div>
              </div>
              
              <div className="p-6">
                <div className="grid grid-cols-1 md:grid-cols-[2fr_1fr] gap-6">
                  {/* Main content */}
                  <div>
                    {/* Image gallery thumbnails - only show additional images */}
                    {selectedLocation.images && selectedLocation.images.length > 1 && (
                      <div className="mb-6">
                        <h3 className="text-sm font-medium mb-3 uppercase tracking-wide text-muted-foreground flex items-center">
                          <ImageIcon className="h-4 w-4 mr-2" />
                          More Photos
                        </h3>
                        <div className="grid grid-cols-4 gap-2">
                          {selectedLocation.images.slice(1).map((img, i) => (
                            <div 
                              key={i} 
                              className="aspect-video rounded-md overflow-hidden bg-muted border shadow-sm hover:shadow-md transition-shadow duration-200 cursor-pointer"
                              onClick={() => {
                                // This would open a full-screen gallery in production
                                console.log("Open full screen image:", img);
                              }}
                            >
                              <img 
                                src={img} 
                                alt={`${selectedLocation.name} - ${i+1}`}
                                className="w-full h-full object-cover"
                              />
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  
                  {/* Main details */}
                  <div className="mb-8">
                    <div className="flex flex-wrap items-center gap-2 mb-4">
                      <Badge>{selectedLocation.category}</Badge>
                      <Badge variant="outline">{selectedLocation.status}</Badge>
                    </div>
                    
                    {selectedLocation.userName && (
                      <p className="text-sm flex items-center mb-4">
                        <User className="h-4 w-4 mr-2" />
                        Submitted by{" "}
                        <a 
                          href={`/users/${selectedLocation.userId}`} 
                          className="ml-1 text-primary hover:underline font-medium"
                        >
                          {selectedLocation.userName}
                        </a>
                      </p>
                    )}
                    
                    <Separator className="my-4" />
                    
                    <h2 className="text-xl font-semibold mb-3">About this location</h2>
                    
                    {/* Location details */}
                    <div className="bg-white border border-gray-200 rounded-lg p-4 mb-4">
                      <div className="grid grid-cols-1 gap-2">
                        <div className="flex items-center">
                          <MapPin className="h-4 w-4 mr-2 text-primary" />
                          <span className="font-medium">Address:</span>
                          <span className="ml-2 text-muted-foreground">{selectedLocation.location}</span>
                        </div>
                        
                        <div className="flex items-center">
                          <MapIcon className="h-4 w-4 mr-2 text-primary" />
                          <span className="font-medium">Coordinates:</span>
                          <span className="ml-2 font-mono text-xs text-muted-foreground">
                            {selectedLocation.coords && Array.isArray(selectedLocation.coords) 
                              ? `${selectedLocation.coords[0].toFixed(6)}, ${selectedLocation.coords[1].toFixed(6)}`
                              : "Not available"}
                          </span>
                        </div>
                        
                        {selectedLocation.userName && (
                          <div className="flex items-center">
                            <User className="h-4 w-4 mr-2 text-primary" />
                            <span className="font-medium">Submitted by:</span>
                            <a 
                              href={`/users/${selectedLocation.userId}`}
                              className="ml-2 text-primary hover:underline"
                            >
                              {selectedLocation.userName}
                            </a>
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <p className="mb-4 leading-relaxed whitespace-pre-line">
                      {selectedLocation.description}
                    </p>
                    
                    {/* Photography Tips section - now part of About this location */}
                    {(selectedLocation.bestTimeOfDay || selectedLocation.recommendedEquipment || selectedLocation.compositionTip) && (
                      <Card className="mb-6 border-muted bg-white">
                        <CardHeader className="pb-2">
                          <CardTitle className="text-base">Photography Tips</CardTitle>
                        </CardHeader>
                        <CardContent>
                          {selectedLocation.bestTimeOfDay && (
                            <div className="mb-3">
                              <h4 className="font-medium mb-1 flex items-center text-sm">
                                <Calendar className="h-4 w-4 mr-2 text-primary" />
                                Best Time of Day
                              </h4>
                              <p className="text-muted-foreground text-sm pl-6">{selectedLocation.bestTimeOfDay}</p>
                            </div>
                          )}
                          
                          {selectedLocation.recommendedEquipment && (
                            <div className="mb-3">
                              <h4 className="font-medium mb-1 flex items-center text-sm">
                                <Camera className="h-4 w-4 mr-2 text-primary" />
                                Recommended Equipment
                              </h4>
                              <p className="text-muted-foreground text-sm pl-6">{selectedLocation.recommendedEquipment}</p>
                            </div>
                          )}
                          
                          {selectedLocation.compositionTip && (
                            <div>
                              <h4 className="font-medium mb-1 flex items-center text-sm">
                                <div className="h-4 w-4 mr-2 flex items-center justify-center">
                                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-primary">
                                    <rect x="2" y="2" width="20" height="20" rx="2" />
                                    <rect x="8" y="8" width="8" height="8" rx="1" />
                                  </svg>
                                </div>
                                Composition Tips
                              </h4>
                              <p className="text-muted-foreground text-sm pl-6">{selectedLocation.compositionTip}</p>
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    )}
                    
                    {/* Comments section */}
                    <div className="mb-6">
                      <h2 className="text-xl font-semibold mb-4 flex items-center">
                        <MessageSquare className="h-5 w-5 mr-2" />
                        Comments ({selectedLocation.comments || 0})
                      </h2>
                      
                      {/* Display comments for the current location */}
                      <div className="space-y-4 mb-6">
                        {locationComments[selectedLocation.id]?.length > 0 ? (
                          locationComments[selectedLocation.id].map((comment) => (
                            <div className="flex gap-3" key={comment.id}>
                              <Avatar>
                                <AvatarFallback>
                                  {comment.username.substring(0, 2).toUpperCase()}
                                </AvatarFallback>
                              </Avatar>
                              <div className="flex-1">
                                <div className="flex items-center justify-between">
                                  <h4 className="font-medium text-sm">{comment.username}</h4>
                                  <span className="text-xs text-muted-foreground">
                                    {new Date(comment.createdAt).toLocaleDateString()}
                                  </span>
                                </div>
                                <p className="text-sm mt-1">{comment.text}</p>
                              </div>
                            </div>
                          ))
                        ) : (
                          <div className="text-center py-6 border border-dashed rounded-md">
                            <MessageSquare className="h-10 w-10 mx-auto mb-2 text-muted-foreground opacity-50" />
                            <p className="text-muted-foreground">No comments yet. Be the first to share your experience!</p>
                          </div>
                        )}
                      </div>
                      
                      {/* Comment form */}
                      <div className="flex gap-3">
                        <Avatar>
                          <AvatarFallback>ME</AvatarFallback>
                        </Avatar>
                        <div className="flex-1">
                          <Textarea 
                            placeholder="Add a comment..." 
                            className="mb-2 resize-none"
                            value={commentText}
                            onChange={(e) => setCommentText(e.target.value)}
                          />
                          <div className="flex justify-end">
                            <Button 
                              size="sm"
                              onClick={() => {
                                if (!commentText.trim()) return;
                                
                                // Use the React Query mutation
                                commentMutation.mutate({ 
                                  locationId: selectedLocation.id, 
                                  text: commentText 
                                }, {
                                  onSuccess: (data) => {
                                    // Success is already handled in the mutation, but we'll also
                                    // update the local state to show the comment immediately
                                    const newComment = {
                                      id: Date.now(), // This will be replaced when we fetch comments
                                      userId: 1, // This would come from authentication context
                                      username: "You", // This would come from authentication context
                                      text: commentText,
                                      createdAt: new Date().toISOString()
                                    };
                                    
                                    // Update local comments state
                                    setLocationComments(prev => ({
                                      ...prev,
                                      [selectedLocation.id]: [
                                        ...(prev[selectedLocation.id] || []),
                                        newComment
                                      ]
                                    }));
                                    
                                    // Update comment count on location
                                    const updatedLocation = {
                                      ...selectedLocation,
                                      comments: (selectedLocation.comments || 0) + 1
                                    };
                                    setSelectedLocation(updatedLocation);
                                  }
                                });
                              }}
                              disabled={!commentText.trim() || commentMutation.isPending}
                            >
                              <Send className="h-4 w-4 mr-2" />
                              Post
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* Sidebar */}
                <div>
                  <Card className="p-6">
                    <h3 className="text-lg font-semibold mb-4">Map</h3>
                    <div className="aspect-square rounded-md bg-white border border-gray-200 overflow-hidden">
                      <iframe
                        width="100%"
                        height="100%"
                        frameBorder="0"
                        style={{ border: 0 }}
                        src={(() => {
                          // Check if we have coords in the right format
                          const lat = selectedLocation.coords?.[0] || 0;
                          const lng = selectedLocation.coords?.[1] || 0;
                          
                          // Special case for Trona Pinnacles (hardcoded fix)
                          // The issue might be that for some locations we have incorrect coordinate format
                          if (selectedLocation.name.includes("Trona Pinnacles")) {
                            // Trona Pinnacles correct coordinates
                            return `https://www.openstreetmap.org/export/embed.html?bbox=-117.4194%2C35.6096%2C-117.3467%2C35.6446&layer=mapnik&marker=35.6271%2C-117.3831`;
                          }
                          
                          // For other locations, use a better validation approach
                          // First, check if coordinates are in valid ranges (-90 to 90 for lat, -180 to 180 for lng)
                          let validLat = lat;
                          let validLng = lng;
                          
                          // If coordinates might be swapped (lat outside -90 to 90 range), swap them
                          if (Math.abs(lat) > 90 && Math.abs(lng) <= 90) {
                            validLat = lng;
                            validLng = lat;
                            console.log("Swapped coordinates - lat was outside valid range");
                          }
                          
                          // Use OpenStreetMap instead which doesn't require an API key
                          return `https://www.openstreetmap.org/export/embed.html?bbox=${validLng-0.05}%2C${validLat-0.05}%2C${validLng+0.05}%2C${validLat+0.05}&layer=mapnik&marker=${validLat}%2C${validLng}`;
                        })()}
                        allowFullScreen
                      ></iframe>
                    </div>
                    <div className="mt-4">
                      <Button 
                        className="w-full"
                        onClick={() => {
                          // Check if we have coords in the right format
                          const lat = selectedLocation.coords?.[0] || 0;
                          const lng = selectedLocation.coords?.[1] || 0;
                          
                          // Special case for Trona Pinnacles (hardcoded fix)
                          if (selectedLocation.name.includes("Trona Pinnacles")) {
                            window.open(
                              `https://www.google.com/maps/dir/?api=1&destination=35.6271,-117.3831`, 
                              '_blank'
                            );
                            return;
                          }
                          
                          // For other locations, use a better validation approach
                          let validLat = lat;
                          let validLng = lng;
                          
                          // If coordinates might be swapped (lat outside -90 to 90 range), swap them
                          if (Math.abs(lat) > 90 && Math.abs(lng) <= 90) {
                            validLat = lng;
                            validLng = lat;
                            console.log("Swapped coordinates - lat was outside valid range");
                          }
                          
                          // Open OpenStreetMap in a new tab
                          window.open(
                            `https://www.openstreetmap.org/directions?from=&to=${validLat}%2C${validLng}`,
                            '_blank'
                          );
                        }}
                      >
                        <MapPin className="h-4 w-4 mr-2" />
                        Get Directions
                      </Button>
                    </div>
                  </Card>
                </div>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </AppLayout>
  );
}